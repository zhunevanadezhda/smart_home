# Smart house

## Описание

Сеть \"умного дома\". Есть отдельно стоящее здание, оборудованное
видеокамерами, системами управления климатом и прочим (по теме \"умный
дом\" написано много). Обеспечить безключевой доступ для владельцев,
аварийное питание, контроль доступа по распознаванию лица и метке.
Необходимо обеспечить резервное копирование данных, восстановление после
сбоя. Датчики и исполнительные механизмы - виртуальные. Можно
использовать игровой движок для иллюстрации.

Нашем «умном доме» есть 4 подсистемы

-   Системы освещения:

> Управляет отдельными светильниками и их группами. Пользователь может
> дистанционно с помощью телефона включить и выключить свет в какой-то
> конкретной комнате или во всем доме.

-   Системы отопления:

> Управляет приборами кондиционирования и отопления. С помощью своего
> телефона пользователь может задать температуру в доме.

-   Аудио:

> Система управляет устройствами для воспроизведения аудио сигналов.
> Позволяет пользователю изменить громкость и отключить звук.

-   Охранная аппаратура и другие функции:

> Система обеспечивает контроль над происходящим в доме. Пользователь
> может включить и отключить сигнализацию, открыть и закрыть двери и
> поднять и опустить ставни окон.

## Структура работа

Установка

За неимением приборов (а также средств на их покупку) для устройства
«умного дома», мы решили воспользоваться iobroker.

Для его установки мы сначала установили node.js.

Далее в диске C создали папку iobroker и с помощью следующих команд
установили в созданной нами папке iobroker:

npm install iobroker

npm install --production

С помощью следующей команда мы запускали сервер iobroker:

iobroker start

Следующей командой мы спрашивали, запущен ли сервер:

iobroker isrun

Чтобы остановить работу сервера мы использовали следующую команду:

iobroker stop

Настройка

Когда сервер был запущен, мы перешли по ссылке <http://127.0.0.1:8081>.
Далее необходимо было скачать драйвера, нужные нам для нашего проекта. В
первую очередь мы скачали «Визуализацию» (vis), потом мы еще скачали
«Скрипты» (javascipt.0), «Текст в команды» (text2commands) и telegram.0.
На рисунке 1 представлены все драйвера, которые нам потребовалось
установить. Также на рисунках 2-3 показаны настройки драйверов, которые
мы изменили. Токен для telegram.0 мы получили, когда создали бот
Telegram. Бот Telegram мы создали с помощью BotFather (см рисунок 4).
При запуске бота мы вводим пароль, которые мы указали на сервере при
настройке telegram.0. При введении правильного пароля, нам пишут «Добро
пожаловать \<имя\>». Если сервер запущен, пишется «Started», если
прервалась связь с сервером: «Restarting...». (см рисунок 5)

Реализация

Далее с помощью элементов визуализации мы создали «дом» (см. рисунок 6)
и настроили его (см. рисунки 7-8). Чтобы пользователь мог им управлять
был создан бот Telegram (см. рисунок 9). Для создания кнопок в Telegram
мы написали скрипт (см. Приложение 1). Для того чтобы наш «дом» как то
реагировал на наши команды мы создали скрипты с помощью Blockly (см.
рисунки 10-13), а так же команды, используя text2commands (см. рисунки
14-20). Т.к. есть похожие команды, здесь указаны не все, а лишь
некоторые команды, остальные подобны представленным.

Для каждого элемента (лампочка, окно, дверь, сигнализация) свои объекты,
скрипты и команды. Чтобы объяснить, что мы делали, возьмем в качестве
примера лампочку.

Алгоритм наших действий:

1.  В Визуализации добавляем элемент «Лампочка» (см. рисунок 7)

2.  Создаем скрипт Blockly

3.  Создаем состояние Test.Lampa (см. рисунок 10)

4.  Сохраняем и запускаем скрипт.

5.  Теперь в папке Test появился объект Lampa (см. рисунок 21)

6.  Далее в Визуализации в настройке нашей лампы в качестве ID объекта
    берем только что созданный объект Lampa из папки Test

7.  Создаем команды для включения и выключения лампочки. (см. рисунки
    16-17)

Для других объектов примерно такой же алгоритм, только скрипты и команды
могут быть разными.

Тестирование

Как работает система можно посмотреть в видео по ссылке:
<https://www.youtube.com/watch?v=GIFwOgzk8QM>

-   включить\\выключить лампочку (см. рисунки 22-23)

-   изменить температуру (см. рисунок 24)

-   узнать температуру в доме (см. рисунок 25)

-   изменить громкость (см. рисунок 25)

-   отключить звук (см. рисунок 26)

-   открыть\\закрыть дверь (см. рисунки 27-28)

-   включить\\отключить сигнализацию (см. рисунки 29-30)

-   опустить\\поднять ставни (см. рисунки 31-32)

## Уязвимости

Управлять нашей системой могут люди, кто имеют доступ к компьютеру, где
создана наша система или же те люди, кто знаю пароль от сервера.

## Меры защищенности проекта (Гостехкомиссии)

Для того чтобы довести нашу инфраструктуру до 6 уровня защищенности по
классификации Гостехкомиссии, нужно провести следующие меры:

1.  создать руководство пользователя,

2.  создать руководство по КСЗ.

## Приложение 1. Скрипт

sendTo(\'telegram.0\', {

text: \'Выбирете клавишу\',

reply_markup: {

keyboard: \[

\[\'help\', \'температура\', \'выключить звук\'\],

\[\'свет зал вкл\', \'свет зал выкл\'\],

\[\'свет кухня вкл\', \'свет кухня выкл\'\],

\[\'свет ванна вкл\', \'свет ванна выкл\'\],

\[\'свет у входа вкл\', \'свет у входа выкл\'\],

\[\'сигн вкл\', \'сигн выкл\'\],

\[\'ставни вкл\', \'ставни выкл\'\],

\[\'дверь открыть\', \'дверь закрыть\'\],

\],

resize_keyboard: true,

one_time_keyboard: true

}

});
